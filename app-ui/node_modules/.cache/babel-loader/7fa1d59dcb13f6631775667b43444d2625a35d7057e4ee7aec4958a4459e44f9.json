{"ast":null,"code":"import { ConnectorNotFoundError, InjectedConnector, ResourceUnavailableError, UserRejectedRequestError, getClient } from \"../chunk-HEIMP7HQ.js\";\nimport \"../chunk-4DNFSL2K.js\";\nimport { __privateAdd, __privateGet, __privateSet } from \"../chunk-MQXBDTVK.js\";\n\n// src/connectors/metaMask.ts\nimport { getAddress } from \"ethers/lib/utils.js\";\nvar _UNSTABLE_shimOnConnectSelectAccount;\nvar MetaMaskConnector = class extends InjectedConnector {\n  constructor() {\n    let {\n      chains,\n      options: options_\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const options = {\n      name: \"MetaMask\",\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      getProvider() {\n        function getReady(ethereum) {\n          const isMetaMask = !!ethereum?.isMetaMask;\n          if (!isMetaMask) return;\n          if (ethereum.isBraveWallet && !ethereum._events && !ethereum._state) return;\n          if (ethereum.isAvalanche) return;\n          if (ethereum.isKuCoinWallet) return;\n          if (ethereum.isPortal) return;\n          if (ethereum.isTokenPocket) return;\n          if (ethereum.isTokenary) return;\n          return ethereum;\n        }\n        if (typeof window === \"undefined\") return;\n        if (window.ethereum?.providers) return window.ethereum.providers.find(getReady);\n        return getReady(window.ethereum);\n      },\n      ...options_\n    };\n    super({\n      chains,\n      options\n    });\n    this.id = \"metaMask\";\n    __privateAdd(this, _UNSTABLE_shimOnConnectSelectAccount, void 0);\n    __privateSet(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);\n  }\n  async connect() {\n    let {\n      chainId\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    try {\n      const provider = await this.getProvider();\n      if (!provider) throw new ConnectorNotFoundError();\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n      this.emit(\"message\", {\n        type: \"connecting\"\n      });\n      let account = null;\n      if (__privateGet(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !getClient().storage?.getItem(this.shimDisconnectKey)) {\n        account = await this.getAccount().catch(() => null);\n        const isConnected = !!account;\n        if (isConnected) try {\n          await provider.request({\n            method: \"wallet_requestPermissions\",\n            params: [{\n              eth_accounts: {}\n            }]\n          });\n        } catch (error) {\n          if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n        }\n      }\n      if (!account) {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        account = getAddress(accounts[0]);\n      }\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      if (this.options?.shimDisconnect) getClient().storage?.setItem(this.shimDisconnectKey, true);\n      return {\n        account,\n        chain: {\n          id,\n          unsupported\n        },\n        provider\n      };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error)) throw new UserRejectedRequestError(error);\n      if (error.code === -32002) throw new ResourceUnavailableError(error);\n      throw error;\n    }\n  }\n};\n_UNSTABLE_shimOnConnectSelectAccount = new WeakMap();\nexport { MetaMaskConnector };","map":{"version":3,"names":["ConnectorNotFoundError","InjectedConnector","ResourceUnavailableError","UserRejectedRequestError","getClient","__privateAdd","__privateGet","__privateSet","getAddress","_UNSTABLE_shimOnConnectSelectAccount","MetaMaskConnector","constructor","chains","options","options_","name","shimDisconnect","shimChainChangedDisconnect","getProvider","getReady","ethereum","isMetaMask","isBraveWallet","_events","_state","isAvalanche","isKuCoinWallet","isPortal","isTokenPocket","isTokenary","window","providers","find","id","UNSTABLE_shimOnConnectSelectAccount","connect","chainId","provider","on","onAccountsChanged","onChainChanged","onDisconnect","emit","type","account","storage","getItem","shimDisconnectKey","getAccount","catch","isConnected","request","method","params","eth_accounts","error","isUserRejectedRequestError","accounts","getChainId","unsupported","isChainUnsupported","chain","switchChain","setItem","code","WeakMap"],"sources":["/home/dev/Desktop/StakingProject/app-ui/node_modules/@wagmi/core/dist/connectors/metaMask.js"],"sourcesContent":["import {\n  ConnectorNotFoundError,\n  InjectedConnector,\n  ResourceUnavailableError,\n  UserRejectedRequestError,\n  getClient\n} from \"../chunk-HEIMP7HQ.js\";\nimport \"../chunk-4DNFSL2K.js\";\nimport {\n  __privateAdd,\n  __privateGet,\n  __privateSet\n} from \"../chunk-MQXBDTVK.js\";\n\n// src/connectors/metaMask.ts\nimport { getAddress } from \"ethers/lib/utils.js\";\nvar _UNSTABLE_shimOnConnectSelectAccount;\nvar MetaMaskConnector = class extends InjectedConnector {\n  constructor({\n    chains,\n    options: options_\n  } = {}) {\n    const options = {\n      name: \"MetaMask\",\n      shimDisconnect: true,\n      shimChainChangedDisconnect: true,\n      getProvider() {\n        function getReady(ethereum) {\n          const isMetaMask = !!ethereum?.isMetaMask;\n          if (!isMetaMask)\n            return;\n          if (ethereum.isBraveWallet && !ethereum._events && !ethereum._state)\n            return;\n          if (ethereum.isAvalanche)\n            return;\n          if (ethereum.isKuCoinWallet)\n            return;\n          if (ethereum.isPortal)\n            return;\n          if (ethereum.isTokenPocket)\n            return;\n          if (ethereum.isTokenary)\n            return;\n          return ethereum;\n        }\n        if (typeof window === \"undefined\")\n          return;\n        if (window.ethereum?.providers)\n          return window.ethereum.providers.find(getReady);\n        return getReady(window.ethereum);\n      },\n      ...options_\n    };\n    super({ chains, options });\n    this.id = \"metaMask\";\n    __privateAdd(this, _UNSTABLE_shimOnConnectSelectAccount, void 0);\n    __privateSet(this, _UNSTABLE_shimOnConnectSelectAccount, options.UNSTABLE_shimOnConnectSelectAccount);\n  }\n  async connect({ chainId } = {}) {\n    try {\n      const provider = await this.getProvider();\n      if (!provider)\n        throw new ConnectorNotFoundError();\n      if (provider.on) {\n        provider.on(\"accountsChanged\", this.onAccountsChanged);\n        provider.on(\"chainChanged\", this.onChainChanged);\n        provider.on(\"disconnect\", this.onDisconnect);\n      }\n      this.emit(\"message\", { type: \"connecting\" });\n      let account = null;\n      if (__privateGet(this, _UNSTABLE_shimOnConnectSelectAccount) && this.options?.shimDisconnect && !getClient().storage?.getItem(this.shimDisconnectKey)) {\n        account = await this.getAccount().catch(() => null);\n        const isConnected = !!account;\n        if (isConnected)\n          try {\n            await provider.request({\n              method: \"wallet_requestPermissions\",\n              params: [{ eth_accounts: {} }]\n            });\n          } catch (error) {\n            if (this.isUserRejectedRequestError(error))\n              throw new UserRejectedRequestError(error);\n          }\n      }\n      if (!account) {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        account = getAddress(accounts[0]);\n      }\n      let id = await this.getChainId();\n      let unsupported = this.isChainUnsupported(id);\n      if (chainId && id !== chainId) {\n        const chain = await this.switchChain(chainId);\n        id = chain.id;\n        unsupported = this.isChainUnsupported(id);\n      }\n      if (this.options?.shimDisconnect)\n        getClient().storage?.setItem(this.shimDisconnectKey, true);\n      return { account, chain: { id, unsupported }, provider };\n    } catch (error) {\n      if (this.isUserRejectedRequestError(error))\n        throw new UserRejectedRequestError(error);\n      if (error.code === -32002)\n        throw new ResourceUnavailableError(error);\n      throw error;\n    }\n  }\n};\n_UNSTABLE_shimOnConnectSelectAccount = new WeakMap();\nexport {\n  MetaMaskConnector\n};\n"],"mappings":"AAAA,SACEA,sBAAsB,EACtBC,iBAAiB,EACjBC,wBAAwB,EACxBC,wBAAwB,EACxBC,SAAS,QACJ,sBAAsB;AAC7B,OAAO,sBAAsB;AAC7B,SACEC,YAAY,EACZC,YAAY,EACZC,YAAY,QACP,sBAAsB;;AAE7B;AACA,SAASC,UAAU,QAAQ,qBAAqB;AAChD,IAAIC,oCAAoC;AACxC,IAAIC,iBAAiB,GAAG,cAAcT,iBAAiB,CAAC;EACtDU,WAAW,GAGH;IAAA,IAHI;MACVC,MAAM;MACNC,OAAO,EAAEC;IACX,CAAC,uEAAG,CAAC,CAAC;IACJ,MAAMD,OAAO,GAAG;MACdE,IAAI,EAAE,UAAU;MAChBC,cAAc,EAAE,IAAI;MACpBC,0BAA0B,EAAE,IAAI;MAChCC,WAAW,GAAG;QACZ,SAASC,QAAQ,CAACC,QAAQ,EAAE;UAC1B,MAAMC,UAAU,GAAG,CAAC,CAACD,QAAQ,EAAEC,UAAU;UACzC,IAAI,CAACA,UAAU,EACb;UACF,IAAID,QAAQ,CAACE,aAAa,IAAI,CAACF,QAAQ,CAACG,OAAO,IAAI,CAACH,QAAQ,CAACI,MAAM,EACjE;UACF,IAAIJ,QAAQ,CAACK,WAAW,EACtB;UACF,IAAIL,QAAQ,CAACM,cAAc,EACzB;UACF,IAAIN,QAAQ,CAACO,QAAQ,EACnB;UACF,IAAIP,QAAQ,CAACQ,aAAa,EACxB;UACF,IAAIR,QAAQ,CAACS,UAAU,EACrB;UACF,OAAOT,QAAQ;QACjB;QACA,IAAI,OAAOU,MAAM,KAAK,WAAW,EAC/B;QACF,IAAIA,MAAM,CAACV,QAAQ,EAAEW,SAAS,EAC5B,OAAOD,MAAM,CAACV,QAAQ,CAACW,SAAS,CAACC,IAAI,CAACb,QAAQ,CAAC;QACjD,OAAOA,QAAQ,CAACW,MAAM,CAACV,QAAQ,CAAC;MAClC,CAAC;MACD,GAAGN;IACL,CAAC;IACD,KAAK,CAAC;MAAEF,MAAM;MAAEC;IAAQ,CAAC,CAAC;IAC1B,IAAI,CAACoB,EAAE,GAAG,UAAU;IACpB5B,YAAY,CAAC,IAAI,EAAEI,oCAAoC,EAAE,KAAK,CAAC,CAAC;IAChEF,YAAY,CAAC,IAAI,EAAEE,oCAAoC,EAAEI,OAAO,CAACqB,mCAAmC,CAAC;EACvG;EACA,MAAMC,OAAO,GAAmB;IAAA,IAAlB;MAAEC;IAAQ,CAAC,uEAAG,CAAC,CAAC;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAM,IAAI,CAACnB,WAAW,EAAE;MACzC,IAAI,CAACmB,QAAQ,EACX,MAAM,IAAIrC,sBAAsB,EAAE;MACpC,IAAIqC,QAAQ,CAACC,EAAE,EAAE;QACfD,QAAQ,CAACC,EAAE,CAAC,iBAAiB,EAAE,IAAI,CAACC,iBAAiB,CAAC;QACtDF,QAAQ,CAACC,EAAE,CAAC,cAAc,EAAE,IAAI,CAACE,cAAc,CAAC;QAChDH,QAAQ,CAACC,EAAE,CAAC,YAAY,EAAE,IAAI,CAACG,YAAY,CAAC;MAC9C;MACA,IAAI,CAACC,IAAI,CAAC,SAAS,EAAE;QAAEC,IAAI,EAAE;MAAa,CAAC,CAAC;MAC5C,IAAIC,OAAO,GAAG,IAAI;MAClB,IAAItC,YAAY,CAAC,IAAI,EAAEG,oCAAoC,CAAC,IAAI,IAAI,CAACI,OAAO,EAAEG,cAAc,IAAI,CAACZ,SAAS,EAAE,CAACyC,OAAO,EAAEC,OAAO,CAAC,IAAI,CAACC,iBAAiB,CAAC,EAAE;QACrJH,OAAO,GAAG,MAAM,IAAI,CAACI,UAAU,EAAE,CAACC,KAAK,CAAC,MAAM,IAAI,CAAC;QACnD,MAAMC,WAAW,GAAG,CAAC,CAACN,OAAO;QAC7B,IAAIM,WAAW,EACb,IAAI;UACF,MAAMb,QAAQ,CAACc,OAAO,CAAC;YACrBC,MAAM,EAAE,2BAA2B;YACnCC,MAAM,EAAE,CAAC;cAAEC,YAAY,EAAE,CAAC;YAAE,CAAC;UAC/B,CAAC,CAAC;QACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;UACd,IAAI,IAAI,CAACC,0BAA0B,CAACD,KAAK,CAAC,EACxC,MAAM,IAAIpD,wBAAwB,CAACoD,KAAK,CAAC;QAC7C;MACJ;MACA,IAAI,CAACX,OAAO,EAAE;QACZ,MAAMa,QAAQ,GAAG,MAAMpB,QAAQ,CAACc,OAAO,CAAC;UACtCC,MAAM,EAAE;QACV,CAAC,CAAC;QACFR,OAAO,GAAGpC,UAAU,CAACiD,QAAQ,CAAC,CAAC,CAAC,CAAC;MACnC;MACA,IAAIxB,EAAE,GAAG,MAAM,IAAI,CAACyB,UAAU,EAAE;MAChC,IAAIC,WAAW,GAAG,IAAI,CAACC,kBAAkB,CAAC3B,EAAE,CAAC;MAC7C,IAAIG,OAAO,IAAIH,EAAE,KAAKG,OAAO,EAAE;QAC7B,MAAMyB,KAAK,GAAG,MAAM,IAAI,CAACC,WAAW,CAAC1B,OAAO,CAAC;QAC7CH,EAAE,GAAG4B,KAAK,CAAC5B,EAAE;QACb0B,WAAW,GAAG,IAAI,CAACC,kBAAkB,CAAC3B,EAAE,CAAC;MAC3C;MACA,IAAI,IAAI,CAACpB,OAAO,EAAEG,cAAc,EAC9BZ,SAAS,EAAE,CAACyC,OAAO,EAAEkB,OAAO,CAAC,IAAI,CAAChB,iBAAiB,EAAE,IAAI,CAAC;MAC5D,OAAO;QAAEH,OAAO;QAAEiB,KAAK,EAAE;UAAE5B,EAAE;UAAE0B;QAAY,CAAC;QAAEtB;MAAS,CAAC;IAC1D,CAAC,CAAC,OAAOkB,KAAK,EAAE;MACd,IAAI,IAAI,CAACC,0BAA0B,CAACD,KAAK,CAAC,EACxC,MAAM,IAAIpD,wBAAwB,CAACoD,KAAK,CAAC;MAC3C,IAAIA,KAAK,CAACS,IAAI,KAAK,CAAC,KAAK,EACvB,MAAM,IAAI9D,wBAAwB,CAACqD,KAAK,CAAC;MAC3C,MAAMA,KAAK;IACb;EACF;AACF,CAAC;AACD9C,oCAAoC,GAAG,IAAIwD,OAAO,EAAE;AACpD,SACEvD,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}