"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
function useCopy(text) {
    const [copied, setCopied] = React.useState(false);
    const reset = React.useRef(() => setCopied(false));
    // Resets 'copied' if text changes
    React.useEffect(() => reset.current, [text]);
    return {
        copied,
        copy: React.useCallback(() => copyToClipboard(text)
            .then(() => setCopied(true))
            .catch(() => setCopied((copied) => copied)), [text]),
        reset: reset.current,
    };
}
/* istanbul ignore next */
function copyToClipboard(text) {
    // uses the Async Clipboard API when available. Requires a secure browing
    // context (i.e. HTTPS)
    if (navigator.clipboard)
        return navigator.clipboard.writeText(text);
    // puts the text to copy into a <span>
    const span = document.createElement('span');
    span.textContent = text;
    // preserves consecutive spaces and newlines
    span.style.whiteSpace = 'pre';
    // adds the <span> to the page
    document.body.appendChild(span);
    // makes a selection object representing the range of text selected by the user
    const selection = window.getSelection();
    if (!selection)
        return Promise.reject();
    const range = window.document.createRange();
    selection.removeAllRanges();
    range.selectNode(span);
    selection.addRange(range);
    // copies text to the clipboard
    try {
        window.document.execCommand('copy');
    }
    catch (err) {
        return Promise.reject();
    }
    // cleans up the dom element and selection
    selection.removeAllRanges();
    window.document.body.removeChild(span);
    // the Async Clipboard API returns a promise that may reject with `undefined`
    // so we match that here for consistency
    return Promise.resolve();
}
exports.default = useCopy;
