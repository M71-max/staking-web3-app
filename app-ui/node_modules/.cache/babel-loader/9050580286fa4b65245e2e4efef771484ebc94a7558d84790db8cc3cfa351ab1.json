{"ast":null,"code":"import _objectSpread from \"/home/dev/Desktop/tes/app-ui/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"../chunk-MQXBDTVK.js\";\n\n// src/providers/alchemy.ts\nimport { providers } from \"ethers\";\nfunction alchemyProvider(_ref) {\n  var apiKey = _ref.apiKey,\n    priority = _ref.priority,\n    stallTimeout = _ref.stallTimeout,\n    weight = _ref.weight;\n  return function (chain) {\n    if (!chain.rpcUrls.alchemy) return null;\n    return {\n      chain: _objectSpread(_objectSpread({}, chain), {}, {\n        rpcUrls: _objectSpread(_objectSpread({}, chain.rpcUrls), {}, {\n          default: \"\".concat(chain.rpcUrls.alchemy, \"/\").concat(apiKey)\n        })\n      }),\n      provider: function provider() {\n        var provider = new providers.AlchemyProvider(chain.id, apiKey);\n        return Object.assign(provider, {\n          priority: priority,\n          stallTimeout: stallTimeout,\n          weight: weight\n        });\n      },\n      webSocketProvider: function webSocketProvider() {\n        return new providers.AlchemyWebSocketProvider(chain.id, apiKey);\n      }\n    };\n  };\n}\nexport { alchemyProvider };","map":{"version":3,"names":["providers","alchemyProvider","apiKey","priority","stallTimeout","weight","chain","rpcUrls","alchemy","default","provider","AlchemyProvider","id","Object","assign","webSocketProvider","AlchemyWebSocketProvider"],"sources":["/home/dev/Desktop/tes/app-ui/node_modules/@wagmi/core/dist/providers/alchemy.js"],"sourcesContent":["import \"../chunk-MQXBDTVK.js\";\n\n// src/providers/alchemy.ts\nimport { providers } from \"ethers\";\nfunction alchemyProvider({\n  apiKey,\n  priority,\n  stallTimeout,\n  weight\n}) {\n  return function(chain) {\n    if (!chain.rpcUrls.alchemy)\n      return null;\n    return {\n      chain: {\n        ...chain,\n        rpcUrls: {\n          ...chain.rpcUrls,\n          default: `${chain.rpcUrls.alchemy}/${apiKey}`\n        }\n      },\n      provider: () => {\n        const provider = new providers.AlchemyProvider(chain.id, apiKey);\n        return Object.assign(provider, { priority, stallTimeout, weight });\n      },\n      webSocketProvider: () => new providers.AlchemyWebSocketProvider(chain.id, apiKey)\n    };\n  };\n}\nexport {\n  alchemyProvider\n};\n"],"mappings":";AAAA,OAAO,sBAAsB;;AAE7B;AACA,SAASA,SAAS,QAAQ,QAAQ;AAClC,SAASC,eAAe,OAKrB;EAAA,IAJDC,MAAM,QAANA,MAAM;IACNC,QAAQ,QAARA,QAAQ;IACRC,YAAY,QAAZA,YAAY;IACZC,MAAM,QAANA,MAAM;EAEN,OAAO,UAASC,KAAK,EAAE;IACrB,IAAI,CAACA,KAAK,CAACC,OAAO,CAACC,OAAO,EACxB,OAAO,IAAI;IACb,OAAO;MACLF,KAAK,kCACAA,KAAK;QACRC,OAAO,kCACFD,KAAK,CAACC,OAAO;UAChBE,OAAO,YAAKH,KAAK,CAACC,OAAO,CAACC,OAAO,cAAIN,MAAM;QAAE;MAC9C,EACF;MACDQ,QAAQ,EAAE,oBAAM;QACd,IAAMA,QAAQ,GAAG,IAAIV,SAAS,CAACW,eAAe,CAACL,KAAK,CAACM,EAAE,EAAEV,MAAM,CAAC;QAChE,OAAOW,MAAM,CAACC,MAAM,CAACJ,QAAQ,EAAE;UAAEP,QAAQ,EAARA,QAAQ;UAAEC,YAAY,EAAZA,YAAY;UAAEC,MAAM,EAANA;QAAO,CAAC,CAAC;MACpE,CAAC;MACDU,iBAAiB,EAAE;QAAA,OAAM,IAAIf,SAAS,CAACgB,wBAAwB,CAACV,KAAK,CAACM,EAAE,EAAEV,MAAM,CAAC;MAAA;IACnF,CAAC;EACH,CAAC;AACH;AACA,SACED,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}