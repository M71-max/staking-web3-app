{"ast":null,"code":"var _jsxFileName = \"/home/dev/Desktop/StakingProject/app-ui/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { chain } from 'wagmi';\nimport reportWebVitals from './reportWebVitals';\nimport { createClient, configureChains, defaultChains, WagmiConfig } from \"wagmi\";\nimport { alchemyProvider } from 'wagmi/providers/alchemy';\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { CoinbaseWalletConnector } from \"wagmi/connectors/coinbaseWallet\";\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\nimport App from './App';\nimport './index.css';\n\n// API key for Ethereum node\n// Two popular services are Infura (infura.io) and Alchemy (alchemy.com)\n// Configure chains for connectors to support\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  chains,\n  provider,\n  webSocketProvider\n} = configureChains([chain.goerli], [alchemyProvider({\n  apiKey: 'mUob5BuwDVy8sahxWzBzYBsWHC3KG41r'\n}), publicProvider()]);\n\n// Set up connectors\nexport const connectors = [new CoinbaseWalletConnector({\n  chains,\n  options: {\n    appName: \"app-ui\"\n  }\n}), new MetaMaskConnector({\n  chains\n})];\nconst client = createClient({\n  autoConnect: true,\n  provider,\n  connectors\n});\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(WagmiConfig, {\n    client: client,\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 46,\n  columnNumber: 3\n}, this));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","chain","reportWebVitals","createClient","configureChains","defaultChains","WagmiConfig","alchemyProvider","publicProvider","CoinbaseWalletConnector","MetaMaskConnector","App","chains","provider","webSocketProvider","goerli","apiKey","connectors","options","appName","client","autoConnect","root","createRoot","document","getElementById","render"],"sources":["/home/dev/Desktop/StakingProject/app-ui/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { chain } from 'wagmi';\nimport reportWebVitals from './reportWebVitals';\nimport { createClient, configureChains, defaultChains, WagmiConfig } from \"wagmi\";\nimport { alchemyProvider } from 'wagmi/providers/alchemy'\nimport { publicProvider } from \"wagmi/providers/public\";\nimport { CoinbaseWalletConnector } from \"wagmi/connectors/coinbaseWallet\";\nimport { MetaMaskConnector } from \"wagmi/connectors/metaMask\";\n\nimport App from './App';\n\nimport './index.css';\n\n// API key for Ethereum node\n// Two popular services are Infura (infura.io) and Alchemy (alchemy.com)\n// Configure chains for connectors to support\nconst { chains, provider, webSocketProvider } = configureChains([chain.goerli], [\n  alchemyProvider({ apiKey: 'mUob5BuwDVy8sahxWzBzYBsWHC3KG41r' }),\n  publicProvider(),\n]);\n\n\n// Set up connectors\nexport const connectors = [\n  new CoinbaseWalletConnector({\n    chains,\n    options: {\n      appName: \"app-ui\",\n    },\n  }),\n  \n  new MetaMaskConnector({\n    chains,\n  }),\n];\n\nconst client = createClient({\n  autoConnect: true,\n  provider,\n  connectors,\n});\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    \n    <WagmiConfig client={ client }>\n      <App />\n    </WagmiConfig>\n    \n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,SAASC,KAAK,QAAQ,OAAO;AAC7B,OAAOC,eAAe,MAAM,mBAAmB;AAC/C,SAASC,YAAY,EAAEC,eAAe,EAAEC,aAAa,EAAEC,WAAW,QAAQ,OAAO;AACjF,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,cAAc,QAAQ,wBAAwB;AACvD,SAASC,uBAAuB,QAAQ,iCAAiC;AACzE,SAASC,iBAAiB,QAAQ,2BAA2B;AAE7D,OAAOC,GAAG,MAAM,OAAO;AAEvB,OAAO,aAAa;;AAEpB;AACA;AACA;AAAA;AACA,MAAM;EAAEC,MAAM;EAAEC,QAAQ;EAAEC;AAAkB,CAAC,GAAGV,eAAe,CAAC,CAACH,KAAK,CAACc,MAAM,CAAC,EAAE,CAC9ER,eAAe,CAAC;EAAES,MAAM,EAAE;AAAmC,CAAC,CAAC,EAC/DR,cAAc,EAAE,CACjB,CAAC;;AAGF;AACA,OAAO,MAAMS,UAAU,GAAG,CACxB,IAAIR,uBAAuB,CAAC;EAC1BG,MAAM;EACNM,OAAO,EAAE;IACPC,OAAO,EAAE;EACX;AACF,CAAC,CAAC,EAEF,IAAIT,iBAAiB,CAAC;EACpBE;AACF,CAAC,CAAC,CACH;AAED,MAAMQ,MAAM,GAAGjB,YAAY,CAAC;EAC1BkB,WAAW,EAAE,IAAI;EACjBR,QAAQ;EACRI;AACF,CAAC,CAAC;AAEF,MAAMK,IAAI,GAAGtB,QAAQ,CAACuB,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,eACT,QAAC,KAAK,CAAC,UAAU;EAAA,uBAEf,QAAC,WAAW;IAAC,MAAM,EAAGN,MAAQ;IAAA,uBAC5B,QAAC,GAAG;MAAA;MAAA;MAAA;IAAA;EAAG;IAAA;IAAA;IAAA;EAAA;AACK;EAAA;EAAA;EAAA;AAAA,QAEG,CACpB;;AAED;AACA;AACA;AACAlB,eAAe,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}