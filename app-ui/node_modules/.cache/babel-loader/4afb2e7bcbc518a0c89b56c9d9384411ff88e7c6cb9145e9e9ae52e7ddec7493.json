{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/dev/Desktop/tes/app-ui/node_modules/@babel/runtime/helpers/regeneratorRuntime.js\").default;\nvar _asyncToGenerator = require(\"/home/dev/Desktop/tes/app-ui/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createAsyncMiddleware = void 0;\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(req, res, next, end) {\n      var resolveNextPromise, nextPromise, returnHandlerCallback, nextWasCalled, asyncNext;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // nextPromise is the key to the implementation\n              // it is resolved by the return handler passed to the\n              // \"next\" function\n              nextPromise = new Promise(function (resolve) {\n                resolveNextPromise = resolve;\n              });\n              returnHandlerCallback = null;\n              nextWasCalled = false; // This will be called by the consumer's async middleware.\n              asyncNext = /*#__PURE__*/function () {\n                var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          nextWasCalled = true;\n                          // We pass a return handler to next(). When it is called by the engine,\n                          // the consumer's async middleware will resume executing.\n                          // eslint-disable-next-line node/callback-return\n                          next(function (runReturnHandlersCallback) {\n                            // This callback comes from JsonRpcEngine._runReturnHandlers\n                            returnHandlerCallback = runReturnHandlersCallback;\n                            resolveNextPromise();\n                          });\n                          _context.next = 4;\n                          return nextPromise;\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n                return function asyncNext() {\n                  return _ref2.apply(this, arguments);\n                };\n              }();\n              _context2.prev = 4;\n              _context2.next = 7;\n              return asyncMiddleware(req, res, asyncNext);\n            case 7:\n              if (!nextWasCalled) {\n                _context2.next = 13;\n                break;\n              }\n              _context2.next = 10;\n              return nextPromise;\n            case 10:\n              // we must wait until the return handler is called\n              returnHandlerCallback(null);\n              _context2.next = 14;\n              break;\n            case 13:\n              end(null);\n            case 14:\n              _context2.next = 19;\n              break;\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](4);\n              if (returnHandlerCallback) {\n                returnHandlerCallback(_context2.t0);\n              } else {\n                end(_context2.t0);\n              }\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 16]]);\n    }));\n    return function (_x, _x2, _x3, _x4) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n}\nexports.createAsyncMiddleware = createAsyncMiddleware;","map":{"version":3,"mappings":";;;;;;;;AAgBA;;;;;;;;;;;;;;;;;AAiBA,SAAgBA,qBAAqB,CACnCC,eAA6C;EAE7C;IAAA,sEAAO,kBAAOC,GAAG,EAAEC,GAAG,EAAEC,IAAI,EAAEC,GAAG;MAAA;MAAA;QAAA;UAAA;YAAA;cAC/B;cACA;cACA;cAEMC,WAAW,GAAG,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAI;gBAC1CC,kBAAkB,GAAGD,OAAO;cAC9B,CAAC,CAAC;cAEEE,qBAAqB,GAAY,IAAI;cACrCC,aAAa,GAAG,KAAK,EAEzB;cACMC,SAAS;gBAAA,uEAAG;kBAAA;oBAAA;sBAAA;wBAAA;0BAChBD,aAAa,GAAG,IAAI;0BAEpB;0BACA;0BACA;0BACAP,IAAI,CAAC,UAACS,yBAAyB,EAAI;4BACjC;4BACAH,qBAAqB,GAAGG,yBAAyB;4BACjDJ,kBAAkB,EAAE;0BACtB,CAAC,CAAC;0BAAC;0BAAA,OACGH,WAAW;wBAAA;wBAAA;0BAAA;sBAAA;oBAAA;kBAAA;gBAAA,CAClB;gBAAA,gBAZKM,SAAS;kBAAA;gBAAA;cAAA;cAAA;cAAA;cAAA,OAePX,eAAe,CAACC,GAAG,EAAEC,GAAG,EAAES,SAAS,CAAC;YAAA;cAAA,KAEtCD,aAAa;gBAAA;gBAAA;cAAA;cAAA;cAAA,OACTL,WAAW;YAAA;cAAE;cAClBI,qBAA+C,CAAC,IAAI,CAAC;cAAC;cAAA;YAAA;cAEvDL,GAAG,CAAC,IAAI,CAAC;YAAC;cAAA;cAAA;YAAA;cAAA;cAAA;cAGZ,IAAIK,qBAAqB,EAAE;gBACxBA,qBAA+C,cAAO;eACxD,MAAM;gBACLL,GAAG,cAAO;;YACX;YAAA;cAAA;UAAA;QAAA;MAAA;IAAA,CAEJ;IAAA;MAAA;IAAA;EAAA;AACH;AA/CAS","names":["createAsyncMiddleware","asyncMiddleware","req","res","next","end","nextPromise","Promise","resolve","resolveNextPromise","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","exports"],"sources":["../src/createAsyncMiddleware.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script","externalDependencies":[]}